{
  "language": "Solidity",
  "sources": {
    "contracts/fund-me.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\nimport \"./priceConverter.sol\";\n\ncontract FundMe {\n    using priceConverter for uint256;\n    uint256 minimumUSD = 50 * 1e18;\n    address[] public funders;\n    address public owner;\n    mapping(address => uint256) public addressToAmountFunder;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversationRate(priceFeed) >= minimumUSD,\n            \"Do'not send enough\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunder[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunder[funder] = 0;\n        }\n        funders = new address[](0);\n        //transfer\n        payable(msg.sender).transfer(address(this).balance);\n        //send\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        require(sendSuccess, \" SEND FAILD\");\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"CALL FAILD\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"SENDER IS NOT OWNER\");\n        _;\n    }\n}\n"
    },
    "contracts/priceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary priceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x9326BFA02ADD2366b30bacB125260Af641031331\r\n        // );\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n        //1**10=100000000\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x9326BFA02ADD2366b30bacB125260Af641031331\r\n        );\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversationRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}